{"version":3,"sources":["modules/Game.class.js","scripts/main.js"],"names":["Game","initialState","state","board","_generateEmptyBoard","score","status","moved","i","line","newLine","_slideAndMerge","join","_addRandomTile","_checkGameStatus","map","row","reverse","moveLeft","_transposeBoard","filter","val","length","push","newBoard","j","emptyCells","col","randomCell","Math","floor","random","some","includes","_noMoreMoves","module","exports","require","game","workingWithHTMLFile","getState","document","querySelectorAll","forEach","cell","value","textContent","className","getStatus","querySelector","classList","remove","addEventListener","restart","start","add","getScore","event","key","moveRight","moveUp","moveDown"],"mappings":"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","file":"main.d65ac9bd.js","sourceRoot":"../src","sourcesContent":["'use strict';\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\nclass Game {\n  constructor(\n    initialState = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n  ) {\n    this.state = initialState;\n    this.board = initialState || this._generateEmptyBoard();\n    this.score = 0;\n    this.status = 'idle'; // 'idle', 'playing', 'win', 'lose'\n  }\n  /*\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n\n  // генерація первинної пустої дошки для гри\n  _generateEmptyBoard() {\n    return [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n  }\n\n  // основний метод для переміщення\n  moveLeft() {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    let moved = false;\n\n    for (let i = 0; i < 4; i++) {\n      const line = this.board[i];\n      const newLine = this._slideAndMerge(line);\n\n      // перевірка чи змінилась дошка\n      if (newLine.join('') !== line.join('')) {\n        moved = true;\n      }\n      this.board[i] = newLine;\n    }\n\n    // якщо була зміщена лінія, то додається\n    // рандомна плитка та перевіряється статус гри\n    if (moved) {\n      this._addRandomTile();\n      this._checkGameStatus();\n    }\n  }\n\n  moveRight() {\n    this.board = this.board.map((row) => row.reverse()); // обертаємо дошку\n    this.moveLeft();\n    this.board = this.board.map((row) => row.reverse());\n  }\n\n  moveUp() {\n    // eslint-disable-next-line max-len\n    this._transposeBoard(); // транспонуємо матрицю, щоб використати метод moveLeft\n    this.moveLeft();\n    this._transposeBoard();\n  }\n\n  moveDown() {\n    this._transposeBoard();\n    this.board = this.board.map((row) => row.reverse());\n    this.moveLeft();\n    this.board = this.board.map((row) => row.reverse());\n    this._transposeBoard();\n  }\n\n  // метод для зсуву і злиття комірок\n  _slideAndMerge(line) {\n    let newLine = line.filter((val) => val); // видаляємо нулі\n\n    for (let i = 0; i < newLine.length - 1; i++) {\n      if (newLine[i] === newLine[i + 1]) {\n        newLine[i] *= 2;\n        this.score += newLine[i]; // додаємо очки\n        newLine[i + 1] = 0;\n      }\n    }\n\n    newLine = newLine.filter((val) => val); // видаляємо злиті комірки\n\n    while (newLine.length < 4) {\n      newLine.push(0); // заповнємо нулями нулями\n    }\n\n    return newLine;\n  }\n\n  // транспонування\n  _transposeBoard() {\n    const newBoard = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < 4; j++) {\n        newBoard[i][j] = this.board[j][i];\n      }\n    }\n\n    this.board = newBoard;\n  }\n\n  // отримання кількості очок\n  getScore() {\n    return this.score;\n  }\n\n  // отримання дошки для гри\n  getState() {\n    return this.board;\n  }\n\n  // отримання статусу гру\n  getStatus() {\n    return this.status;\n  }\n\n  // початок гри\n  start() {\n    this.score = 0;\n    this.status = 'playing';\n    this._addRandomTile(); // добавляє одну дощечку на екран\n    this._addRandomTile();\n  }\n\n  // перезапуск гри\n  restart() {\n    this.board = this._generateEmptyBoard();\n    this.score = 0;\n    this.status = 'idle';\n\n    // this.start();\n  }\n\n  // Add your own methods here\n\n  // створення рандомної дощечки\n  _addRandomTile() {\n    const emptyCells = [];\n\n    // пошук усіх пустих дощечок\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        if (this.board[row][col] === 0) {\n          emptyCells.push({ row, col });\n        }\n      }\n    }\n\n    // добавлення рандомного числа 2/4 в одну з пустих комірок\n    if (emptyCells.length > 0) {\n      const randomCell =\n        emptyCells[Math.floor(Math.random() * emptyCells.length)];\n\n      this.board[randomCell.row][randomCell.col] = Math.random() < 0.9 ? 2 : 4;\n    }\n  }\n\n  // зміна статусу гри win/lose\n  _checkGameStatus() {\n    if (this.board.some((row) => row.includes(2048))) {\n      this.status = 'win';\n    }\n\n    if (this._noMoreMoves()) {\n      this.status = 'lose';\n    }\n  }\n\n  // перевірка чи є ще можливі кроки у грі. повертає boolean\n  _noMoreMoves() {\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        // перевіряє наявність порожніх клітинок\n        if (this.board[row][col] === 0) {\n          return false;\n        }\n\n        // перевіряє чи можливо об'єднати дві сусідні дощечки по колонках\n        if (col < 3 && this.board[row][col] === this.board[row][col + 1]) {\n          return false;\n        }\n\n        // перевіряє чи можливо об'єднати дві сусідні дощечки по рядках\n        if (row < 3 && this.board[row][col] === this.board[row + 1][col]) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n}\n\nmodule.exports = Game;\n","/* eslint-disable max-len */\n/* eslint-disable no-shadow */\n'use strict';\n\n// Uncomment the next lines to use your game instance in the browser\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\n// Write your code here\n// console.log(game.getState());\n// game.moveLeft();\n// console.log(game.getState());\n\ndocument.addEventListener('keydown', (event) => {\n  switch (event.key) {\n    case 'ArrowLeft':\n      game.moveLeft();\n      break;\n    case 'ArrowRight':\n      game.moveRight();\n      break;\n    case 'ArrowUp':\n      game.moveUp();\n      break;\n    case 'ArrowDown':\n      game.moveDown();\n      break;\n  }\n\n  workingWithHTMLFile();\n});\n\nfunction workingWithHTMLFile() {\n  // заповнення комірок html\n  const board = game.getState();\n  const cells = document.querySelectorAll('.field-cell');\n\n  cells.forEach((cell, i) => {\n    const value = board[Math.floor(i / 4)][i % 4];\n\n    cell.textContent = value || '';\n    cell.className = `field-cell ${value ? `field-cell--${value}` : ''}`;\n  });\n  // //////////\n\n  // вивід тексту на екран в залежності від результату win/lose\n  const status = game.getStatus();\n\n  if (status === 'win') {\n    document.querySelector('.message-win').classList.remove('hidden');\n  } else if (status === 'lose') {\n    document.querySelector('.message-lose').classList.remove('hidden');\n  }\n  // ////////\n\n  // початок/перезапуск гри\n  document.querySelector('.button').addEventListener('click', () => {\n    if (game.status === 'playing') {\n      game.restart();\n    } else {\n      game.start();\n    }\n\n    // console.log(status);\n\n    document.querySelector('.message-start').classList.add('hidden');\n    document.querySelector('.message-win').classList.add('hidden');\n    document.querySelector('.message-lose').classList.add('hidden');\n\n    document.querySelector('.button').classList.remove('start');\n    document.querySelector('.button').classList.add('restart'); // заміняємо клас для button\n    document.querySelector('.button').textContent = 'Restart'; // заміняємо текст button\n\n    workingWithHTMLFile();\n  });\n  // ///////\n\n  // добавлення score на екран\n  document.querySelector('.game-score').textContent = game.getScore();\n  // ////////\n}\n\n// запускаємо дошку вперше\nworkingWithHTMLFile();\n"]}